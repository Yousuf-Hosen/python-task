# -*- coding: utf-8 -*-
""".ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1agOr_GjfPKZsOrJwWLEfZrELKBtozF6_
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

def read_dataset(file_path):
    # Read the dataset from the file
    dataset = pd.read_csv(file_path)
    return dataset

def preprocess_dataset(dataset):
    # Clean the dataset by replacing 'unknown' values with NaN
    dataset.replace('unknown', pd.np.nan, inplace=True)

    # Drop rows with missing values
    dataset.dropna(inplace=True)

    # Convert categorical variables into numerical representations
    label_encoder = LabelEncoder()
    categorical_cols = ['job', 'marital', 'education', 'housing', 'loan', 'contact', 'month', 'day_of_week', 'poutcome']
    for col in categorical_cols:
        dataset[col] = label_encoder.fit_transform(dataset[col])

    return dataset

# File paths for the training and test datasets
trainset_file = 'trainset.csv'
testset_file = 'testset.csv'

# Read the training dataset
trainset = read_dataset(trainset_file)

# Read the test dataset
testset = read_dataset(testset_file)

# Data Exploration
print("Training dataset:")
print(trainset.describe())

# Preprocessing
trainset = preprocess_dataset(trainset)
testset = preprocess_dataset(testset)

# Split the dataset into features (X) and target (y)
X_train = trainset.drop('subscribed', axis=1)
y_train = trainset['subscribed']
X_test = testset.drop('subscribed', axis=1)
y_test = testset['subscribed']

# Model Building
# Decision Tree Classifier
decision_tree = DecisionTreeClassifier()
decision_tree.fit(X_train, y_train)

# Logistic Regression
logistic_regression = LogisticRegression()
logistic_regression.fit(X_train, y_train)

# Model Testing and Reporting
# Decision Tree Classifier
y_pred_dt = decision_tree.predict(X_test)
accuracy_dt = accuracy_score(y_test, y_pred_dt)
precision_dt = precision_score(y_test, y_pred_dt)
recall_dt = recall_score(y_test, y_pred_dt)
f1_score_dt = f1_score(y_test, y_pred_dt)

# Logistic Regression
y_pred_lr = logistic_regression.predict(X_test)
accuracy_lr = accuracy_score(y_test, y_pred_lr)
precision_lr = precision_score(y_test, y_pred_lr)
recall_lr = recall_score(y_test, y_pred_lr)
f1_score_lr = f1_score(y_test, y_pred_lr)

# Reporting Results
print("\nTesting Results:")
print("Decision Tree Classifier - Accuracy: {:.2f}, Precision: {:.2f}, Recall: {:.2f}, F1-Score: {:.2f}".format(accuracy_dt, precision_dt, recall_dt, f1_score_dt))
print("Logistic Regression - Accuracy: {:.2f}, Precision: {:.2f}, Recall: {:.2f}, F1-Score: {:.2f}".format(accuracy_lr, precision_lr, recall_lr, f1_score_lr))

